{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3f9aea4d5e3f1e20f61ab8ae7e97ad262c7d66f9a03f15940305a1c1fa47d932",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1106201",
    "logsBloom": "0x
    "blockHash": "0x1b9cfdd76c80b3f18ccd0ce95e48cc21a4d206194c193c9ecef40640fbb84bee",
    "transactionHash": "0x3f9aea4d5e3f1e20f61ab8ae7e97ad262c7d66f9a03f15940305a1c1fa47d932",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1106201",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "7b05f640eed5bf2a3c1d26feb244c1bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Nicolas Manzato\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n *  @author Nicolas Manzato\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n\\n\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] public s_funders;\\n\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n    \\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        return s_priceFeed.version();\\n    }\\n    \\n    function withdraw() public payable onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        \\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        \\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n}\",\"keccak256\":\"0xe845ddef1051d474c614e75619342b69f0e8809b105ab7c48d9ef77df6c2cd74\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n  // We could make this public, but then we'd have to deploy it\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // Goerli ETH / USD Address\\n    // https://docs.chain.link/docs/ethereum-addresses/;\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x6a8f964157da8b5eaafcdff588df91428ab9b2370a9acda797aad0989724ac86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013a7380380620013a783398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b61123b806200016c6000396000f3fe60806040526004361061008a5760003560e01c806354861af71161005957806354861af7146101405780636b69a5921461017d578063b60d4288146101a8578063be2693f0146101b2578063dba6335f146101bc57610099565b80630d8e6e2c146100a35780630ec3b027146100ce5780631bf6132d146100f95780633ccfd60b1461013657610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100b8610321565b6040516100c59190610afc565b60405180910390f35b3480156100da57600080fd5b506100e36103c8565b6040516100f09190610b96565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b9190610bf4565b6103ee565b60405161012d9190610afc565b60405180910390f35b61013e610406565b005b34801561014c57600080fd5b5061016760048036038101906101629190610c4d565b610648565b6040516101749190610c89565b60405180910390f35b34801561018957600080fd5b50610192610687565b60405161019f9190610afc565b60405180910390f35b6101b06101e7565b005b6101ba610694565b005b3480156101c857600080fd5b506101d161093a565b6040516101de9190610c89565b60405180910390f35b6802b5e3af16b1880000610226600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461096090919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d01565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610d50565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561038b57600080fd5b505afa15801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190610dbb565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610538576000600182815481106104b3576104b2610de8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053090610e17565b915050610490565b50600067ffffffffffffffff81111561055457610553610e60565b5b6040519080825280602002602001820160405280156105825781602001602082028036833780820191505090505b5060019080519060200190610598929190610a3c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105bf90610ec0565b60006040518083038185875af1925050503d80600081146105fc576040519150601f19603f3d011682016040523d82523d6000602084013e610601565b606091505b5050905080610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90610f21565b60405180910390fd5b50565b6001818154811061065857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561079f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610755575b5050505050905060005b81518110156108295760008282815181106107c7576107c6610de8565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061082190610e17565b9150506107a9565b50600067ffffffffffffffff81111561084557610844610e60565b5b6040519080825280602002602001820160405280156108735781602001602082028036833780820191505090505b5060019080519060200190610889929190610a3c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108b090610ec0565b60006040518083038185875af1925050503d80600081146108ed576040519150601f19603f3d011682016040523d82523d6000602084013e6108f2565b606091505b5050905080610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092d90610f21565b60405180910390fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061096c8361099c565b90506000670de0b6b3a764000085836109859190610f41565b61098f9190610fca565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109e557600080fd5b505afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190611073565b5050509150506402540be40081610a3491906110ee565b915050919050565b828054828255906000526020600020908101928215610ab5579160200282015b82811115610ab45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a5c565b5b509050610ac29190610ac6565b5090565b5b80821115610adf576000816000905550600101610ac7565b5090565b6000819050919050565b610af681610ae3565b82525050565b6000602082019050610b116000830184610aed565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b5c610b57610b5284610b17565b610b37565b610b17565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b600080fd5b6000610bc182610b17565b9050919050565b610bd181610bb6565b8114610bdc57600080fd5b50565b600081359050610bee81610bc8565b92915050565b600060208284031215610c0a57610c09610bb1565b5b6000610c1884828501610bdf565b91505092915050565b610c2a81610ae3565b8114610c3557600080fd5b50565b600081359050610c4781610c21565b92915050565b600060208284031215610c6357610c62610bb1565b5b6000610c7184828501610c38565b91505092915050565b610c8381610bb6565b82525050565b6000602082019050610c9e6000830184610c7a565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ceb601b83610ca4565b9150610cf682610cb5565b602082019050919050565b60006020820190508181036000830152610d1a81610cde565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5b82610ae3565b9150610d6683610ae3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9b57610d9a610d21565b5b828201905092915050565b600081519050610db581610c21565b92915050565b600060208284031215610dd157610dd0610bb1565b5b6000610ddf84828501610da6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e2282610ae3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e5557610e54610d21565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610eaa600083610e8f565b9150610eb582610e9a565b600082019050919050565b6000610ecb82610e9d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f0b600b83610ca4565b9150610f1682610ed5565b602082019050919050565b60006020820190508181036000830152610f3a81610efe565b9050919050565b6000610f4c82610ae3565b9150610f5783610ae3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f9057610f8f610d21565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fd582610ae3565b9150610fe083610ae3565b925082610ff057610fef610f9b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61101a81610ffb565b811461102557600080fd5b50565b60008151905061103781611011565b92915050565b6000819050919050565b6110508161103d565b811461105b57600080fd5b50565b60008151905061106d81611047565b92915050565b600080600080600060a0868803121561108f5761108e610bb1565b5b600061109d88828901611028565b95505060206110ae8882890161105e565b94505060406110bf88828901610da6565b93505060606110d088828901610da6565b92505060806110e188828901611028565b9150509295509295909350565b60006110f98261103d565b91506111048361103d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561114357611142610d21565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111805761117f610d21565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111bd576111bc610d21565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111fa576111f9610d21565b5b82820290509291505056fea264697066735822122069c20ca3b50828c631328776ee2e7ec14e58336d18d042381032f56b102be7af64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c806354861af71161005957806354861af7146101405780636b69a5921461017d578063b60d4288146101a8578063be2693f0146101b2578063dba6335f146101bc57610099565b80630d8e6e2c146100a35780630ec3b027146100ce5780631bf6132d146100f95780633ccfd60b1461013657610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100b8610321565b6040516100c59190610afc565b60405180910390f35b3480156100da57600080fd5b506100e36103c8565b6040516100f09190610b96565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b9190610bf4565b6103ee565b60405161012d9190610afc565b60405180910390f35b61013e610406565b005b34801561014c57600080fd5b5061016760048036038101906101629190610c4d565b610648565b6040516101749190610c89565b60405180910390f35b34801561018957600080fd5b50610192610687565b60405161019f9190610afc565b60405180910390f35b6101b06101e7565b005b6101ba610694565b005b3480156101c857600080fd5b506101d161093a565b6040516101de9190610c89565b60405180910390f35b6802b5e3af16b1880000610226600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461096090919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d01565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610d50565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561038b57600080fd5b505afa15801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190610dbb565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610538576000600182815481106104b3576104b2610de8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053090610e17565b915050610490565b50600067ffffffffffffffff81111561055457610553610e60565b5b6040519080825280602002602001820160405280156105825781602001602082028036833780820191505090505b5060019080519060200190610598929190610a3c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105bf90610ec0565b60006040518083038185875af1925050503d80600081146105fc576040519150601f19603f3d011682016040523d82523d6000602084013e610601565b606091505b5050905080610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90610f21565b60405180910390fd5b50565b6001818154811061065857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561079f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610755575b5050505050905060005b81518110156108295760008282815181106107c7576107c6610de8565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061082190610e17565b9150506107a9565b50600067ffffffffffffffff81111561084557610844610e60565b5b6040519080825280602002602001820160405280156108735781602001602082028036833780820191505090505b5060019080519060200190610889929190610a3c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108b090610ec0565b60006040518083038185875af1925050503d80600081146108ed576040519150601f19603f3d011682016040523d82523d6000602084013e6108f2565b606091505b5050905080610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092d90610f21565b60405180910390fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061096c8361099c565b90506000670de0b6b3a764000085836109859190610f41565b61098f9190610fca565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109e557600080fd5b505afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190611073565b5050509150506402540be40081610a3491906110ee565b915050919050565b828054828255906000526020600020908101928215610ab5579160200282015b82811115610ab45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a5c565b5b509050610ac29190610ac6565b5090565b5b80821115610adf576000816000905550600101610ac7565b5090565b6000819050919050565b610af681610ae3565b82525050565b6000602082019050610b116000830184610aed565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b5c610b57610b5284610b17565b610b37565b610b17565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b600080fd5b6000610bc182610b17565b9050919050565b610bd181610bb6565b8114610bdc57600080fd5b50565b600081359050610bee81610bc8565b92915050565b600060208284031215610c0a57610c09610bb1565b5b6000610c1884828501610bdf565b91505092915050565b610c2a81610ae3565b8114610c3557600080fd5b50565b600081359050610c4781610c21565b92915050565b600060208284031215610c6357610c62610bb1565b5b6000610c7184828501610c38565b91505092915050565b610c8381610bb6565b82525050565b6000602082019050610c9e6000830184610c7a565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ceb601b83610ca4565b9150610cf682610cb5565b602082019050919050565b60006020820190508181036000830152610d1a81610cde565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5b82610ae3565b9150610d6683610ae3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9b57610d9a610d21565b5b828201905092915050565b600081519050610db581610c21565b92915050565b600060208284031215610dd157610dd0610bb1565b5b6000610ddf84828501610da6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e2282610ae3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e5557610e54610d21565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610eaa600083610e8f565b9150610eb582610e9a565b600082019050919050565b6000610ecb82610e9d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f0b600b83610ca4565b9150610f1682610ed5565b602082019050919050565b60006020820190508181036000830152610f3a81610efe565b9050919050565b6000610f4c82610ae3565b9150610f5783610ae3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f9057610f8f610d21565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fd582610ae3565b9150610fe083610ae3565b925082610ff057610fef610f9b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61101a81610ffb565b811461102557600080fd5b50565b60008151905061103781611011565b92915050565b6000819050919050565b6110508161103d565b811461105b57600080fd5b50565b60008151905061106d81611047565b92915050565b600080600080600060a0868803121561108f5761108e610bb1565b5b600061109d88828901611028565b95505060206110ae8882890161105e565b94505060406110bf88828901610da6565b93505060606110d088828901610da6565b92505060806110e188828901611028565b9150509295509295909350565b60006110f98261103d565b91506111048361103d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561114357611142610d21565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111805761117f610d21565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111bd576111bc610d21565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111fa576111f9610d21565b5b82820290509291505056fea264697066735822122069c20ca3b50828c631328776ee2e7ec14e58336d18d042381032f56b102be7af64736f6c63430008080033",
  "devdoc": {
    "author": "Nicolas Manzato",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
